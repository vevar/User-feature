openapi: 3.0.0
info:
  description: "User service"
  version: "1.0.0"
  title: "User service"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "alxminyaev@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: "http://localhost/user"
tags:
  - name: "Role"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "User"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "Professor"
    description: "Роль"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "Student"
    description: "Роль"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "Tutor"
    description: "Роль"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"

paths:
  /api/v1/role:
    get:
      tags:
        - "Role"
      summary: "Get roles"
      description: ""
      operationId: "getRole"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleListResponse"

  /api/v1/user:
    post:
      tags:
        - "User"
      summary: "Create user"
      description: ""
      operationId: "postUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreatedResponse"
        "403":
          description: "Forbidden"
        "401":
          description: "Unauthorized"
    get:
      tags:
        - "User"
      summary: "Get users"
      description: ""
      operationId: "getUsers"
      parameters:
        - in: query
          required: true
          name: offset
          schema:
            type: integer
            format: int64
          description: The number of items to skip before starting to collect the result set
        - in: query
          required: true
          name: limit
          schema:
            type: integer
            format: int32
          description: The numbers of items to return
        - in: query
          name: roles
          schema:
            type: array
            items:
              type: integer
              format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        "403":
          description: "Forbidden"
        "401":
          description: "Unauthorized"
  /api/v1/user/{id}:
    put:
      tags:
        - "User"
      summary: "Update user"
      description: ""
      operationId: "putUser"
      parameters:
        - name: id
          in: path
          description: ID of object to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: OK
        "403":
          description: "Forbidden"
        "401":
          description: "Unauthorized"
    delete:
      tags:
        - "User"
      summary: "Update user"
      description: ""
      operationId: "deleteUser"
      parameters:
        - name: id
          in: path
          description: ID of object to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        "403":
          description: "Forbidden"
        "401":
          description: "Unauthorized"

  /api/v1/professor/{id}:
    get:
      tags:
        - "Professor"
      summary: "Get professor by id "
      description: ""
      operationId: "getProfessorById"
      parameters:
        - name: id
          in: path
          description: ID of object to return
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfessorGetResponse"
        "404":
          description: "Not found"
    put:
      tags:
        - "Professor"
      summary: "Update professor"
      description: ""
      operationId: "updateProfessorById"
      parameters:
        - name: id
          in: path
          description: ID of object to update
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfessorPutRequest'
      responses:
        '200':
          description: OK
        "404":
          description: "Not found"
        "403":
          description: "Forbidden"
        "401":
          description: "Unauthorized"


  /api/v1/student/{id}:
    get:
      tags:
        - "Student"
      summary: "Get student by id "
      description: ""
      operationId: "getStudentById"
      parameters:
        - name: id
          in: path
          description: ID of object to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentGetResponse"
        "404":
          description: "Not found"
    put:
      tags:
        - "Student"
      summary: "Update student"
      description: ""
      operationId: "updateStudentById"
      parameters:
        - name: id
          in: path
          description: ID of object to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentPutRequest'
      responses:
        '200':
          description: OK
        "404":
          description: "Not found"
        "403":
          description: "Forbidden"
        "401":
          description: "Unauthorized"

  /api/v1/tutor/{id}:
    get:
      tags:
        - "Tutor"
      summary: "Get tutor by id "
      description: ""
      operationId: "getTutorById"
      parameters:
        - name: id
          in: path
          description: ID of object to return
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TutorGetResponse"
        "404":
          description: "Not found"
    put:
      tags:
        - "Tutor"
      summary: "Update tutor"
      description: ""
      operationId: "updateTutorById"
      parameters:
        - name: id
          in: path
          description: ID of object to update
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TutorPutRequest'
      responses:
        '200':
          description: OK
        "404":
          description: "Not found"
        "403":
          description: "Forbidden"
        "401":
          description: "Unauthorized"


components:
  schemas:
    Profile:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        middleName:
          type: "string"

    AccountNew:
      type: object
      required:
        - login
        - password
        - repeatPassword
      properties:
        login:
          type: "string"
        password:
          type: "string"
        repeatPassword:
          type: "string"

    ProfessorPutRequest:
      type: object
      required:
        - account
      properties:
        profile:
          $ref: '#/components/schemas/Profile'

    ProfessorGetResponse:
      type: object
      required:
        - user
      properties:
        user:
          $ref: "#/components/schemas/UserResponse"

    TutorPutRequest:
      type: object
      required:
        - profile
      properties:
        profile:
          $ref: '#/components/schemas/Profile'

    TutorGetResponse:
      type: object
      required:
        - user
      properties:
        user:
          $ref: "#/components/schemas/UserResponse"


    UserRequest:
      type: object
      required:
        - account
        - profile
        - roles
      properties:
        account:
          $ref: '#/components/schemas/AccountNew'
        profile:
          $ref: '#/components/schemas/Profile'
        roles:
          type: array
          items:
            type: integer

    StudentPutRequest:
      type: object
      required:
        - profile
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
        groupId:
          type: "integer"
          format: "int32"

    StudentGetResponse:
      type: object
      required:
        - user
      properties:
        user:
          $ref: "#/components/schemas/UserResponse"
        groupId:
          type: "integer"
          format: "int32"

    UserListResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'

    UserResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: "integer"
          format: "int64"
        roles:
          type: array
          items:
            type: integer

        profile:
          $ref: "#/components/schemas/Profile"

    RoleListResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'

    RoleResponse:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    UserCreatedResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: "integer"
          format: "int64"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"