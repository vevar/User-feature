/**
 * User service
 * User service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: alxminyaev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dev.alxminyaev.feature.user.api.apis


import com.google.gson.Gson
import dev.alxminyaev.feature.user.DataLimit
import dev.alxminyaev.feature.user.api.Paths
import dev.alxminyaev.feature.user.api.models.UserCreatedResponse
import dev.alxminyaev.feature.user.api.models.UserListResponse
import dev.alxminyaev.feature.user.api.models.UserRequest
import dev.alxminyaev.feature.user.api.toUserResponse
import dev.alxminyaev.feature.user.model.Role
import dev.alxminyaev.feature.user.model.toDomain
import dev.alxminyaev.feature.user.usecase.user.CreateUserUseCase
import dev.alxminyaev.feature.user.usecase.user.GetUsersListUseCase
import io.ktor.application.*
import io.ktor.http.*
import io.ktor.locations.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import org.kodein.di.instance
import org.kodein.di.ktor.di

@KtorExperimentalLocationsAPI
fun Route.UserApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    delete<Paths.deleteUser> { _: Paths.deleteUser ->

    }


    get<Paths.getUsers> { param: Paths.getUsers ->
        val getUserUC by di().instance<GetUsersListUseCase>()
        val users =
            getUserUC.invoke(DataLimit(param.offset, param.limit), roles = param.roles?.map { Role.valueById(it) })
        call.respond(UserListResponse(data = users.map { it.toUserResponse() }.toTypedArray()))
    }


    route("/api/v1/user") {
        post {
            val createUserUC by di().instance<CreateUserUseCase>()
            val userRequest = call.receive<UserRequest>()
            val userId = createUserUC.invoke(
                userRequest.profile.toDomain(),
                userRequest.account.toDomain(),
                userRequest.roles.map { Role.valueById(it) })
            call.respond(UserCreatedResponse(userId))
        }
    }


    route("/api/v1/user/{id}") {
        put {
            call.respond(HttpStatusCode.NotImplemented)

        }
    }

}
